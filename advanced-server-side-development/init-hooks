	Sometimes, however, the business case is complex, and it can't be solved using data files. In such cases, you can use the init hook from the manifest file to perform the operations you want.

1. Register the hook in the __manifest__.py file with the post_init_hook key:
2. Add the add_book_hook() method in the __init__.py file:...
'post_init_hook': 'add_book_hook',
...

from odoo import api, fields, SUPERUSER_ID
def add_book_hook(cr, registry):
    env = api.Environment(cr, SUPERUSER_ID, {})
    book_data1 = {'name': 'Book 1', 'date_release':
fields.Date.today()}
    book_data2 = {'name': 'Book 2', 'date_release':
fields.Date.today()}
    env['library.book'].create([book_data1, book_data2])


	In step 2, we declared the add_book_hook() method, which will be called after the module is installed. We created two records from this method. In real situations, you can write complex business logic here.
	In the example, we looked at post_init_hook, but Odoo supports two more hooks:
	• pre_init_hook: This hook will be invoked when you start installing a module. It is the opposite of post_init_hook; it will be invoked before installing the current module.
	• uninstall_hook: This hook will be invoked when you uninstall the module. This is mostly used when your module needs a garbage-collection mechanism.
