extension inheritance: 

When a model class is defined with the _inherit attribute, it adds modifications to the
inherited model, rather than replacing it.
This means that fields defined in the inheriting class are added or changed on the parent
model. At the database layer, the ORM is adding fields to the same database table.
Fields are also incrementally modified. This means that if the field already exists in the
superclass, only the attributes declared in the inherited class are modified; the other ones
are kept as they are in the parent class.




prototype inheritance:

By using _name with the _inherit class attribute at the same time, you can copy the
definition of the model. When you use both attributes in the model, Odoo will copy the
model definition of _inherit and create a new model with the _name attribute.

The new model has its own database table with its own data that is totally independent from the parent model. Since it still inherits from the partner model, any subsequent
modifications to it will also affect the new model.

Prototype inheritance copies all the properties of the parent class. It copies fields,
attributes, and methods. If you want to modify them in the child class, you can simply do
so by adding a new definition to the child class. For example, the library.book model
has the _name_get method. If you want to use a different version of _name_get in the
child, you need to redefine the method in the library.book.copy model.

Prototype inheritance does not work if you use the same model name in the
_inherit and _name attributes. If you do use the same model name in the
_inherit and _name attributes, it will just behave like a normal extension
inheritance.




delegation inheritance:

To better understand how this works, let's look at what happens at a database level when
we create a new member:

• A new record is created in the res_partner table.
• A new record is created in the library_member table.
• The partner_id field of the library_member table is set to the ID of the res_partner record that is created for it.

The member record is automatically linked to a new partner record. It's just a many-
to-one relation, but the delegation mechanism adds some magic so that the partner's
fields are seen as if they belong to the member record, and a new partner record is also
automatically created with the new member.
